version: 2.1

orbs:
  kubernetes: circleci/kubernetes@0.12.0
  aws-cli: circleci/aws-cli@2.0
  aws-eks: circleci/aws-eks@1.1.0

jobs:
  build-app:
    docker:
      - image: circleci/node:16.13.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            # Your code here
            sudo npm install
            
      - save_cache:
          key: frontend-build
          paths: [node_modules]
  

  lint-docker:
    docker:
      - image: python:3.7.3-stretch
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: frontend-build
      # Your job code here
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            hadolint .nodeapp/Dockerfile
  
  push-app-to-docker:
    machine: true
    steps:
         - checkout
         - run: |
            cd nodeapp
            docker build -t greentropikal/node-web-app:latest .
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push greentropikal/node-web-app:latest
 
 
# Creation of Cluster        
  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
        default: nodeapp
    steps:
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
              | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - aws-eks/create-cluster:
          cluster-name: nodeapp
          node-type: t3.medium

   # Test the Cluster               
  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: << parameters.aws-region >>
      - run:
          command: |
            kubectl get services
            kubectl get pods
            kubectl describe pods
            kubectl get nodes
            kubectl get deployment
            kubectl get services -o wide
          name: Test cluster

  # Deployment of the application
  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/nodeapp

workflows:
  default:
    jobs:
      - build-app
      - lint-docker:
          requires: [build-app]
      
      - push-app-to-docker:
          requires: [lint-docker]
          
      - create-cluster:
          requires: [push-app-to-docker]
          
      - test-cluster:
          cluster-name: nodeapp
          aws-region: $AWS_REGION
          requires: [create-cluster]

      - create-deployment:
          cluster-name: nodeapp
          aws-region: $AWS_REGION
          requires: [test-cluster]